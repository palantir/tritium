package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor")
public final class InstrumentedOverlappingNames implements OverlappingNames {
    private static final Method FOO_ffffa0f6;

    static {
        try {
            FOO_ffffa0f6 = OverlappingNames.class.getMethod(
                    "foo", int.class, int.class, int.class, int.class, int.class, int.class, int.class, int.class,
                    int.class);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final OverlappingNames delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedOverlappingNames(
            OverlappingNames delegate,
            InvocationEventHandler<InvocationContext> handler,
            InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public int foo(
            int returnValue,
            int result,
            int context,
            int invocationContext,
            int throwable,
            int thrown,
            int filter,
            int handler,
            int delegate) {
        InvocationContext _invocationContext = this.handler.isEnabled()
                ? Handlers.pre(this.handler, this.filter, this, FOO_ffffa0f6, new Object[] {
                    returnValue, result, context, invocationContext, throwable, thrown, filter, handler, delegate
                })
                : Handlers.disabled();
        try {
            int _result = this.delegate.foo(
                    returnValue, result, context, invocationContext, throwable, thrown, filter, handler, delegate);
            Handlers.onSuccess(this.handler, _invocationContext, _result);
            return _result;
        } catch (Throwable _throwable) {
            Handlers.onFailure(this.handler, _invocationContext, _throwable);
            throw _throwable;
        }
    }

    @Override
    public String toString() {
        return "InstrumentedOverlappingNames{" + this.delegate + "}";
    }

    public static InstrumentationBuilder<OverlappingNames, OverlappingNames> builder(OverlappingNames delegate) {
        return new InstrumentationBuilder<OverlappingNames, OverlappingNames>(
                OverlappingNames.class, delegate, InstrumentedOverlappingNames::new);
    }

    public static OverlappingNames trace(OverlappingNames delegate) {
        return InstrumentationBuilder.trace(OverlappingNames.class, delegate, InstrumentedOverlappingNames::new);
    }

    public static OverlappingNames instrument(OverlappingNames delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
