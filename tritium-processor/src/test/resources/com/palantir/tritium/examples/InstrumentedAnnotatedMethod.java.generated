package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor")
public final class InstrumentedAnnotatedMethod implements AnnotatedMethod {
    private static final Method FOO_ed3d1cab;

    static {
        try {
            FOO_ed3d1cab = AnnotatedMethod.class.getMethod("foo");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final AnnotatedMethod delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedAnnotatedMethod(
            AnnotatedMethod delegate, InvocationEventHandler<InvocationContext> handler, InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public String foo() {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, FOO_ed3d1cab, new Object[] {});
            try {
                String returnValue = this.delegate.foo();
                Handlers.onSuccess(this.handler, invocationContext, returnValue);
                return returnValue;
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            return this.delegate.foo();
        }
    }

    @Override
    public String bar() {
        return this.delegate.bar();
    }

    @Override
    public String toString() {
        return "InstrumentedAnnotatedMethod{" + this.delegate + "}";
    }

    public static InstrumentationBuilder<AnnotatedMethod, AnnotatedMethod> builder(AnnotatedMethod delegate) {
        return new InstrumentationBuilder<AnnotatedMethod, AnnotatedMethod>(
                AnnotatedMethod.class, delegate, InstrumentedAnnotatedMethod::new);
    }

    public static AnnotatedMethod trace(AnnotatedMethod delegate) {
        return InstrumentationBuilder.trace(AnnotatedMethod.class, delegate, InstrumentedAnnotatedMethod::new);
    }

    public static AnnotatedMethod instrument(AnnotatedMethod delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
