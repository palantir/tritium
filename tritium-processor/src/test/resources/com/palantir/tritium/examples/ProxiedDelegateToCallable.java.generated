package com.palantir.tritium.examples;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.UndeclaredThrowableException;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.ProxyAnnotationProcessor")
public final class ProxiedDelegateToCallable<T> implements DelegateToCallable<T> {
    private static final Method CALL;

    private static final Method EQUALS;

    private static final Method TO_STRING;

    static {
        try {
            CALL = DelegateToCallable.class.getMethod("call");
            EQUALS = DelegateToCallable.class.getMethod("equals", Object.class);
            TO_STRING = DelegateToCallable.class.getMethod("toString");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final InvocationHandler handler;

    private ProxiedDelegateToCallable(InvocationHandler handler) {
        this.handler = handler;
    }

    @Override
    @SuppressWarnings("unchecked")
    public T call() throws Exception {
        try {
            Object returned = this.handler.invoke(this, CALL, new Object[]{});
            return (T) returned;
        } catch (Exception | Error throwable) {
            throw throwable;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj) {
        try {
            Object returned = this.handler.invoke(this, EQUALS, new Object[]{obj});
            return (boolean) returned;
        } catch (Error | RuntimeException throwable) {
            throw throwable;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public String toString() {
        try {
            Object returned = this.handler.invoke(this, TO_STRING, new Object[]{});
            return (String) returned;
        } catch (Error | RuntimeException throwable) {
            throw throwable;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public static <T> DelegateToCallable<T> of(InvocationHandler handler) {
        return new ProxiedDelegateToCallable<>(handler);
    }
}
