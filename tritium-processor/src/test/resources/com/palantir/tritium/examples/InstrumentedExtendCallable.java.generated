package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor2")
public final class InstrumentedExtendCallable<T> implements ExtendCallable<T> {
    private static final Method CALL_ccb78c7b;

    static {
        try {
            CALL_ccb78c7b = ExtendCallable.class.getMethod("call");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final ExtendCallable<T> delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedExtendCallable(
            ExtendCallable<T> delegate,
            InvocationEventHandler<InvocationContext> handler,
            InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public T call() throws Exception {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CALL_ccb78c7b, new Object[] {});
            try {
                T returnValue = this.delegate.call();
                Handlers.onSuccess(this.handler, invocationContext, returnValue);
                return returnValue;
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            return this.delegate.call();
        }
    }

    @Override
    public String toString() {
        return "InstrumentedExtendCallable{" + this.delegate + "}";
    }

    public static <T> InstrumentationBuilder<ExtendCallable<T>, ExtendCallable<T>> builder(ExtendCallable<T> delegate) {
        return new InstrumentationBuilder<ExtendCallable<T>, ExtendCallable<T>>(
                ExtendCallable.class, delegate, InstrumentedExtendCallable<T>::new);
    }

    public static <T> ExtendCallable<T> trace(ExtendCallable<T> delegate) {
        return InstrumentationBuilder.trace(ExtendCallable.class, delegate, InstrumentedExtendCallable<T>::new);
    }

    public static <T> ExtendCallable<T> instrument(ExtendCallable<T> delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
