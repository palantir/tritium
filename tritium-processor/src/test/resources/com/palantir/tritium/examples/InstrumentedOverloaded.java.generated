package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor2")
public final class InstrumentedOverloaded implements Overloaded {
    private static final Method CONSUME_ffb85b9e;

    private static final Method CONSUME_df0ee456;

    private static final Method CONSUME_a19d7e27;

    private static final Method CONSUME_d75bd264;

    private static final Method CONSUME_2cf3095c;

    static {
        try {
            CONSUME_ffb85b9e = Overloaded.class.getMethod("consume", int.class);
            CONSUME_df0ee456 = Overloaded.class.getMethod("consume", String.class);
            CONSUME_a19d7e27 = Overloaded.class.getMethod("consume", Object.class);
            CONSUME_d75bd264 = Overloaded.class.getMethod("consume", double[].class);
            CONSUME_2cf3095c = Overloaded.class.getMethod("consume");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final Overloaded delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedOverloaded(
            Overloaded delegate, InvocationEventHandler<InvocationContext> handler, InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public void consume(int value) {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CONSUME_ffb85b9e, new Object[] {value});
            try {
                this.delegate.consume(value);
                Handlers.onSuccess(this.handler, invocationContext);
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            this.delegate.consume(value);
        }
    }

    @Override
    public void consume(String value) {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CONSUME_df0ee456, new Object[] {value});
            try {
                this.delegate.consume(value);
                Handlers.onSuccess(this.handler, invocationContext);
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            this.delegate.consume(value);
        }
    }

    @Override
    public void consume(Object value) {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CONSUME_a19d7e27, new Object[] {value});
            try {
                this.delegate.consume(value);
                Handlers.onSuccess(this.handler, invocationContext);
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            this.delegate.consume(value);
        }
    }

    @Override
    public void consume(double[] value) {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CONSUME_d75bd264, new Object[] {value});
            try {
                this.delegate.consume(value);
                Handlers.onSuccess(this.handler, invocationContext);
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            this.delegate.consume(value);
        }
    }

    @Override
    public void consume() {
        if (this.handler.isEnabled()) {
            InvocationContext invocationContext =
                    Handlers.pre(this.handler, this.filter, this, CONSUME_2cf3095c, new Object[] {});
            try {
                this.delegate.consume();
                Handlers.onSuccess(this.handler, invocationContext);
            } catch (Throwable throwable) {
                Handlers.onFailure(this.handler, invocationContext, throwable);
                throw throwable;
            }
        } else {
            this.delegate.consume();
        }
    }

    @Override
    public String toString() {
        return "InstrumentedOverloaded{" + this.delegate + "}";
    }

    public static InstrumentationBuilder<Overloaded, Overloaded> builder(Overloaded delegate) {
        return new InstrumentationBuilder<Overloaded, Overloaded>(
                Overloaded.class, delegate, InstrumentedOverloaded::new);
    }

    public static Overloaded trace(Overloaded delegate) {
        return InstrumentationBuilder.trace(Overloaded.class, delegate, InstrumentedOverloaded::new);
    }

    public static Overloaded instrument(Overloaded delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
