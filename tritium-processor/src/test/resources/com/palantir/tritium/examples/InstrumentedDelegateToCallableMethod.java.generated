package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import java.util.concurrent.Callable;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor")
public final class InstrumentedDelegateToCallableMethod<T> implements DelegateToCallableMethod<T> {
    private static final Method CALL_ccb78c7b;

    static {
        try {
            CALL_ccb78c7b = Callable.class.getMethod("call");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final Callable<T> delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedDelegateToCallableMethod(
            Callable<T> delegate, InvocationEventHandler<InvocationContext> handler, InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public T call() throws Exception {
        InvocationContext _invocationContext = this.handler.isEnabled()
                ? Handlers.pre(this.handler, this.filter, this, CALL_ccb78c7b, new Object[] {})
                : Handlers.disabled();
        try {
            T _result = this.delegate.call();
            Handlers.onSuccess(this.handler, _invocationContext, _result);
            return _result;
        } catch (Throwable _throwable) {
            Handlers.onFailure(this.handler, _invocationContext, _throwable);
            throw _throwable;
        }
    }

    @Override
    public String toString() {
        return "InstrumentedDelegateToCallableMethod{" + this.delegate + "}";
    }

    public static <T> InstrumentationBuilder<Callable<T>, DelegateToCallableMethod<T>> builder(Callable<T> delegate) {
        return new InstrumentationBuilder<Callable<T>, DelegateToCallableMethod<T>>(
                Callable.class, delegate, InstrumentedDelegateToCallableMethod<T>::new);
    }

    public static <T> DelegateToCallableMethod<T> trace(Callable<T> delegate) {
        return InstrumentationBuilder.trace(Callable.class, delegate, InstrumentedDelegateToCallableMethod<T>::new);
    }

    public static <T> DelegateToCallableMethod<T> instrument(Callable<T> delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
