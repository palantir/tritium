package com.palantir.tritium.examples;

import com.palantir.tritium.annotations.internal.InstrumentationBuilder;
import com.palantir.tritium.api.event.InstrumentationFilter;
import com.palantir.tritium.event.Handlers;
import com.palantir.tritium.event.InvocationContext;
import com.palantir.tritium.event.InvocationEventHandler;
import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;
import java.lang.reflect.Method;
import java.util.Objects;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.processor.TritiumAnnotationProcessor")
public final class InstrumentedBindsParameter implements BindsParameter {
    private static final Method GET_e93818ce;

    static {
        try {
            GET_e93818ce = BindsParameter.class.getMethod("get");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final BindsParameter delegate;

    private final InvocationEventHandler<InvocationContext> handler;

    private final InstrumentationFilter filter;

    private InstrumentedBindsParameter(
            BindsParameter delegate, InvocationEventHandler<InvocationContext> handler, InstrumentationFilter filter) {
        this.delegate = Objects.requireNonNull(delegate, "delegate");
        this.handler = Objects.requireNonNull(handler, "handler");
        this.filter = Objects.requireNonNull(filter, "filter");
    }

    @Override
    public CharSequence get() {
        InvocationContext _invocationContext = this.handler.isEnabled()
                ? Handlers.pre(this.handler, this.filter, this, GET_e93818ce, new Object[] {})
                : Handlers.disabled();
        try {
            CharSequence _result = this.delegate.get();
            Handlers.onSuccess(this.handler, _invocationContext, _result);
            return _result;
        } catch (Throwable _throwable) {
            Handlers.onFailure(this.handler, _invocationContext, _throwable);
            throw _throwable;
        }
    }

    @Override
    public String toString() {
        return "InstrumentedBindsParameter{" + this.delegate + "}";
    }

    public static InstrumentationBuilder<BindsParameter, BindsParameter> builder(BindsParameter delegate) {
        return new InstrumentationBuilder<BindsParameter, BindsParameter>(
                BindsParameter.class, delegate, InstrumentedBindsParameter::new);
    }

    public static BindsParameter trace(BindsParameter delegate) {
        return InstrumentationBuilder.trace(BindsParameter.class, delegate, InstrumentedBindsParameter::new);
    }

    public static BindsParameter instrument(BindsParameter delegate, TaggedMetricRegistry registry) {
        return builder(delegate).withTaggedMetrics(registry).withTracing().build();
    }
}
