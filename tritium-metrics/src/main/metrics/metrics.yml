options:
  javaPackage: com.palantir.tritium.metrics
  javaVisibility: packagePrivate
namespaces:
  jvm.gc:
    docs: Java virtual machine garbage collection metrics.
    metrics:
      count:
        type: gauge
        tags: [collector]
        docs: The total number of collections that have occurred since the JVM started.
      time:
        type: gauge
        tags: [collector]
        docs: The accumulated collection elapsed time in milliseconds.
      finalizer.queue.size:
        type: gauge
        docs: Estimate of the number of objects pending finalization. Finalizers are executed in serial on a single
              thread shared across the entire JVM. When a finalizer is slow and blocks execution, or objects which
              override `Object.finalize` are allocated more quickly than they can be freed, the JVM will run out
              of memory. Cleaners are recommended over implementing finalize in most scenarios.
  jvm.memory.pools:
    docs: Java virtual machine memory usage metrics by memory pool.
    metrics:
      max:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the maximum number of bytes that can be used by the corresponding pool.
      used:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the number of bytes used by the corresponding pool.
      committed:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the number of bytes that the jvm has committed to use by the corresponding pool.
      init:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the number of bytes that the jvm initially requested to the os by the corresponding pool.
      usage:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the ratio of the number of bytes used to the maximum number of bytes that can be used by the corresponding pool.
      used-after-gc:
        type: gauge
        tags: [memoryPool]
        docs: Gauge of the number of bytes used after the last garbage collection by the corresponding pool. Note that this metrics is not supported by all implementations.
  tls:
    docs: Transport layer security metrics.
    metrics:
      handshake:
        type: meter
        tags: [context, cipher, protocol]
        docs: Measures the rate of TLS handshake by SSLContext, cipher suite, and TLS protocol. A high rate of handshake suggests that clients are not properly reusing connections, which results in additional CPU overhead and round trips.
  executor:
    docs: Executor metrics.
    metrics:
      submitted:
        type: meter
        tags: [executor]
        docs: A meter of the number of submitted tasks.
      running:
        type: counter
        tags: [executor]
        docs: A gauge of the number of running tasks.
      duration:
        type: timer
        tags: [executor]
        docs: A timer of the time it took to run a task.
      queued-duration:
        type: timer
        tags: [executor]
        docs: A timer of the time it took a task to start running after it was submitted.
      scheduled.repetitively:
        type: meter
        tags: [executor]
        docs: A meter of the number of repetitive scheduled tasks. Applies only to scheduled executors.
      scheduled.overrun:
        type: counter
        tags: [executor]
        docs: A gauge of the number of fixed-rate scheduled tasks that overran the scheduled rate. Applies only to scheduled executors.
      # ThreadFactory metrics
      threads.created:
        type: meter
        tags: [executor]
        docs: Rate that new threads are created for this executor.
      threads.terminated:
        type: meter
        tags: [executor]
        docs: Rate that executor threads are terminated.
      threads.running:
        type: counter
        tags: [executor]
        docs: Number of live threads created by this executor.
