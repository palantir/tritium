package com.palantir.tritium.examples;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.List;
import javax.annotation.processing.Generated;

@Generated("com.palantir.tritium.proxy.processor.ProxyAnnotationProcessor")
public final class ParameterizedProxy<T> implements Parameterized<T> {
    private static final Method CONSUME_PARAMETER;

    private static final Method PRODUCE_PARAMETER;

    private static final Method HASH_CODE;

    private static final Method EQUALS;

    private static final Method METHOD_PARAMETER;

    private static final Method TO_STRING;

    private static final Method CONSUME_LIST_OF_PARAMETER;

    static {
        try {
            CONSUME_PARAMETER = Parameterized.class.getMethod("consumeParameter", Object.class);
            PRODUCE_PARAMETER = Parameterized.class.getMethod("produceParameter");
            HASH_CODE = Parameterized.class.getMethod("hashCode");
            EQUALS = Parameterized.class.getMethod("equals", Object.class);
            METHOD_PARAMETER = Parameterized.class.getMethod("methodParameter", Object.class, Object.class);
            TO_STRING = Parameterized.class.getMethod("toString");
            CONSUME_LIST_OF_PARAMETER = Parameterized.class.getMethod("consumeListOfParameter", List.class);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    private final InvocationHandler handler;

    private ParameterizedProxy(InvocationHandler handler) {
        this.handler = handler;
    }

    @Override
    public void consumeParameter(T value) {
        try {
            Object returned = this.handler.invoke(this, CONSUME_PARAMETER, new Object[]{value});
            void.class.cast(returned);
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public T produceParameter() {
        try {
            Object returned = this.handler.invoke(this, PRODUCE_PARAMETER, new Object[]{});
            return (T) returned;
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public int hashCode() {
        try {
            Object returned = this.handler.invoke(this, HASH_CODE, new Object[]{});
            return (int) returned;
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj) {
        try {
            Object returned = this.handler.invoke(this, EQUALS, new Object[]{obj});
            return (boolean) returned;
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public <U extends T> T methodParameter(T first, U second) {
        try {
            Object returned = this.handler.invoke(this, METHOD_PARAMETER, new Object[]{first, second});
            return (T) returned;
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public String toString() {
        try {
            Object returned = this.handler.invoke(this, TO_STRING, new Object[]{});
            return (String) returned;
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    @Override
    public void consumeListOfParameter(List<T> value) {
        try {
            Object returned = this.handler.invoke(this, CONSUME_LIST_OF_PARAMETER, new Object[]{value});
            void.class.cast(returned);
        } catch (Error | RuntimeException rethrown) {
            throw rethrown;
        } catch (Throwable throwable) {
            throw new UndeclaredThrowableException(throwable);
        }
    }

    public static <T> Parameterized<T> of(InvocationHandler handler) {
        return new ParameterizedProxy<>(handler);
    }
}
