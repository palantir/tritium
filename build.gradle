buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:10.0.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.54.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:2.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencyRecommendations {
        strategy OverrideTransitives
    }

    configurations {
        all {
            resolutionStrategy {
                failOnVersionConflict()
            }
        }

        checkstyle {
            resolutionStrategy {
                // checkstyle requires different Guava
                force 'com.google.guava:guava:25.1-jre'
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://dl.bintray.com/marshallpierce/maven/'
        }
    }

    plugins.withId('com.palantir.baseline-error-prone', {
        dependencies {
            compileOnly 'com.google.code.findbugs:jsr305'
            errorprone 'com.uber.nullaway:nullaway'
        }

        tasks.withType(JavaCompile).configureEach {
            options.errorprone.disableWarningsInGeneratedCode = true
            options.errorprone.errorproneArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
                '-XepDisableWarningsInGeneratedCode',
                // skipping Immutable* explicitly due to https://github.com/google/error-prone/issues/1165
                '-XepExcludedPaths:.*(generated|Immutable).*',
                '-XepOpt:NullAway:AnnotatedPackages=com.palantir',
                '-Xep:AmbiguousMethodReference:ERROR',
                '-Xep:BoxedPrimitiveConstructor:ERROR',
                '-Xep:CatchFail:ERROR',
                '-Xep:ClassCanBeStatic:ERROR',
                '-Xep:DefaultCharset:ERROR',
                '-Xep:FunctionalInterfaceClash:ERROR',
                '-Xep:JavaTimeDefaultTimeZone:ERROR',
                '-Xep:MethodCanBeStatic:ERROR',
                '-Xep:NullAway:ERROR',
                '-Xep:NonCanonicalStaticMemberImport:ERROR',
                '-Xep:PreferSafeLoggableExceptions:ERROR',
                '-Xep:PreferSafeLoggingPreconditions:ERROR',
                '-Xep:ReturnMissingNullable:ERROR',
                '-Xep:Slf4jLogsafeArgs:ERROR',
                '-Xep:SwitchStatementDefaultCase:ERROR',
                '-Xep:UnnecessaryParentheses:ERROR',
                '-Xep:UnusedVariable:ERROR',
            ]
        }
    })

    tasks.withType(Test) {
        testLogging {
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            events "started", "passed", "skipped", "failed"
        }
    }

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)
}

