buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:12.0.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.57.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:1.5.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:2.2.0'
        classpath 'com.google.errorprone:error_prone_core:2.3.3'
    }
}

apply plugin: 'java'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations {
        checkstyle {
            resolutionStrategy {
                // checkstyle requires different Guava
                force 'com.google.guava:guava:25.1-jre'
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://dl.bintray.com/marshallpierce/maven/'
        }
    }

    dependencies {
        constraints {
            rootConfiguration 'io.dropwizard.metrics:metrics-core', {
                version { strictly '[3, 4[' }
                because "Spark still uses 3.X, which can't co-exist with 4.X"
            }
        }
    }

    plugins.withId('com.palantir.baseline-error-prone', {
        dependencies {
            compileOnly 'com.google.code.findbugs:jsr305'
            errorprone 'com.uber.nullaway:nullaway'
        }

        tasks.withType(JavaCompile).configureEach {
            options.errorprone.disableWarningsInGeneratedCode = true
            options.errorprone.errorproneArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
                '-XepDisableWarningsInGeneratedCode',
                // skipping Immutable* explicitly due to https://github.com/google/error-prone/issues/1165
                '-XepExcludedPaths:.*(generated|Immutable).*',
                '-XepOpt:NullAway:AnnotatedPackages=com.palantir',
            ]

            // warnings not explicitly provided by error-prone
            Set<String> warningsToPromote = [
                'NullAway',
                'Slf4jLogsafeArgs',
                'PreferCollectionTransform',
                'PreferListsPartition',
                'PreferSafeLoggingPreconditions',
                'PreferSafeLoggableExceptions',
                'SwitchStatementDefaultCase',
            ]

            com.google.errorprone.scanner.BuiltInCheckerSuppliers.ENABLED_WARNINGS.forEach {
                check -> warningsToPromote << check.canonicalName()
            }

            com.google.errorprone.scanner.BuiltInCheckerSuppliers.DISABLED_CHECKS.forEach {
                check -> warningsToPromote << check.canonicalName()
            }

            for (String checkName : warningsToPromote) {
                options.errorprone.errorproneArgs << '-Xep:' + checkName + ':ERROR'
            }

            logger.info("Error-prone args: {}", options.errorprone.errorproneArgs)

            if (generateErrorPronePatch) {
                def patchChecks = [
                    "PreferSafeLoggableExceptions",
                    "PreferCollectionTransform",
                    "PreferListsPartition",
                ]

                logger.info("Generating error-prone.patch for checks {} apply with:\n"
                        + "    find . -maxdepth 3 -type f -name 'error-prone.patch' \\ \n"
                        + "-exec bash -c \"  "
                        + "cd \$(dirname {}) "
                        + "&& patch -p0 -u -i error-prone.patch "
                        + "&& rm error-prone.patch"
                        + "\" \\;", patchChecks.join(','))

                options.errorprone.errorproneArgs += [
                    "-XepPatchLocation:" + project.projectDir.getAbsolutePath(),
                    "-XepPatchChecks:" + patchChecks.join(',')
                ]
            }
        }
    })

    tasks.withType(Test) {
        testLogging {
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            events "started", "passed", "skipped", "failed"
        }
    }

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)
}

