buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.baseline:gradle-baseline-java:5.49.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.22.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.15.0'
        classpath 'com.palantir.gradle.failure-reports:gradle-failure-reports:1.9.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:3.0.0'
        classpath 'com.palantir.gradle.jdks:gradle-jdks:0.37.0'
        classpath 'com.palantir.gradle.jdkslatest:gradle-jdks-latest:0.13.0'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.7.0'
        classpath 'com.palantir.jakartapackagealignment:jakarta-package-alignment:0.6.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.42.0'
        classpath 'com.palantir.metricschema:gradle-metric-schema:0.31.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.7.0'
        classpath 'me.champeau.jmh:jmh-gradle-plugin:0.7.2'
    }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.failure-reports'
apply plugin: 'java'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.jdks.latest'

javaVersions {
    libraryTarget = 11
    runtime = 21
}

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'
    apply plugin: 'com.palantir.baseline-exact-dependencies'
    apply plugin: 'com.palantir.baseline-null-away'
    apply plugin: 'com.palantir.jakarta-package-alignment'
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'com.palantir.revapi'

    configurations {
        testImplementationClasspath {
            exclude module: 'junit'
        }
    }

    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    plugins.withId('com.palantir.baseline-error-prone', {
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
            ]

            options.errorprone {
                option('NullAway:AnnotatedPackages', 'com.palantir,com.google.common')
                option('NullAway:CheckOptionalEmptiness', 'true')

                // warnings not explicitly provided by error-prone
                error 'NullAway',
                        'Slf4jLogsafeArgs',
                        'PreferCollectionTransform',
                        'PreferListsPartition',
                        'PreferSafeLoggingPreconditions',
                        'PreferSafeLoggableExceptions',
                        'PreferSafeLogger'


                disable 'AndroidJdkLibsChecker', // ignore Android
                        'Java7ApiChecker', // tritium requires JDK 11+
                        'Java8ApiChecker', // tritium requires JDK 11+
                        'MemberName', // false positives on ignored lambda args
                        'StaticOrDefaultInterfaceMethod', // Android specific
                        'Var', // high noise, low signal
                        'Varifier' // don't `var`ify everything yet as this conflicts with baseline VarUsage

                errorproneArgs = [
                    '-XepAllSuggestionsAsWarnings',
                ]
            }
        }
    })

    tasks.withType(Test).configureEach {
        useJUnitPlatform {
            includeEngines 'jqwik', 'junit-jupiter'
        }
        // see https://docs.gradle.org/current/userguide/performance.html#execute_tests_in_parallel
        // and https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
        // N.B. some tests depend on system properties, so cannot be concurrently executed
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        systemProperty("junit.jupiter.execution.parallel.enabled", "true")
        systemProperty("junit.jupiter.execution.parallel.mode.default", "same_thread")
        systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    tasks.withType(Javadoc).configureEach {
        // suppress Javadoc doclint warnings in Java 8+
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    tasks.check.dependsOn(javadoc)
    tasks.check.dependsOn(checkImplicitDependencies)
    tasks.check.dependsOn(checkUnusedDependencies)
    tasks.check.dependsOn(checkUnusedConstraints)
}
