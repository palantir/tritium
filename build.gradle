buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:8.2.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.38.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:2.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('versions.props')
    }

    configurations {
        all {
            resolutionStrategy {
                failOnVersionConflict()
            }
        }

        checkstyle {
            resolutionStrategy {
                // checkstyle requires different Guava
                force 'com.google.guava:guava:25.1-jre'
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://dl.bintray.com/marshallpierce/maven/'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.errorproneArgs += [
            '-Werror',
            '-Xlint:deprecation',
            '-XepDisableWarningsInGeneratedCode',
            '-XepExcludedPaths:.*/build/.*generated.*',
            '-Xep:AmbiguousMethodReference:ERROR',
            '-Xep:BoxedPrimitiveConstructor:ERROR',
            '-Xep:CatchFail:ERROR',
            '-Xep:ClassCanBeStatic:ERROR',
            '-Xep:DefaultCharset:ERROR',
            '-Xep:FunctionalInterfaceClash:ERROR',
            '-Xep:MethodCanBeStatic:ERROR',
            '-Xep:NonCanonicalStaticMemberImport:ERROR',
            '-Xep:ReturnMissingNullable:ERROR',
            '-Xep:Slf4jLogsafeArgs:ERROR',
        ]
    }

    tasks.withType(Test) {
        testLogging {
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            events "started", "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = project.files(classDirectories.files.collect {
                // Exclusion path is project-relative and has a base of compiled classes
                fileTree(dir: it, exclude: '**/Immutable*.class')
            })
        }
    }

    jacoco {
        toolVersion = "0.8.2" // bump for JDK 11 compatibility
    }

    tasks.jacocoTestReport.dependsOn(tasks.test)
    tasks.check.dependsOn(tasks.jacocoTestReport)

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

}

