buildscript {
    repositories {
        jcenter()
        gradlePluginPortal()
        maven { url  'https://palantir.bintray.com/releases'}
    }

    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:1.1.0'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.4.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.netflix.nebula:gradle-info-plugin:9.1.1'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:17.3.2'
        classpath 'com.palantir.baseline:gradle-baseline-java:3.57.1'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:1.27.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.3'
        classpath 'com.palantir.metricschema:gradle-metric-schema:0.5.15'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'com.google.errorprone:error_prone_core:2.4.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'
    apply plugin: 'com.palantir.baseline-exact-dependencies'
    apply plugin: 'com.palantir.java-format'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations {
        testImplementationClasspath {
            exclude module: 'junit'
        }
    }

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/palantir/releases/' }
        maven { url 'https://dl.bintray.com/marshallpierce/maven/' }
    }

    dependencies {
        constraints {
            rootConfiguration 'io.dropwizard.metrics:metrics-core', {
                version { strictly '[3, 4[' }
                because "Spark still uses 3.X, which can't co-exist with 4.X"
            }
        }

    }

    plugins.withId('com.palantir.baseline-error-prone', {
        dependencies {
            errorprone 'com.uber.nullaway:nullaway'
        }

        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
            ]

            options.errorprone {
                option('NullAway:AnnotatedPackages', 'com.palantir')

                // warnings not explicitly provided by error-prone
                error 'NullAway',
                    'Slf4jLogsafeArgs',
                    'PreferCollectionTransform',
                    'PreferListsPartition',
                    'PreferSafeLoggingPreconditions',
                    'PreferSafeLoggableExceptions'

                // increase strictness for built-in error-prone checks
                error((com.google.errorprone.scanner.BuiltInCheckerSuppliers.ENABLED_WARNINGS +
                        com.google.errorprone.scanner.BuiltInCheckerSuppliers.DISABLED_CHECKS
                    ).collect { it.canonicalName() } as String[])

                disable 'AndroidJdkLibsChecker', // ignore Android
                    'Java7ApiChecker', // tritium requires JDK8+
                    'StaticOrDefaultInterfaceMethod', // Android specific
                    'Var' // high noise, low signal
            }
        }
    })

    tasks.withType(Test) {
        useJUnitPlatform {
            includeEngines 'jqwik', 'junit-jupiter'
        }
        maxParallelForks Runtime.getRuntime().availableProcessors()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

    checkImplicitDependencies {
        // avoid spurious flags on dropwizard metrics
        ignore 'io.dropwizard.metrics', 'metrics-core'
    }
    tasks.check.dependsOn(checkImplicitDependencies)
    tasks.check.dependsOn(checkUnusedDependencies)

}

