buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.gradle.jdks:gradle-jdks:0.25.0'
        classpath 'com.palantir.gradle.jdkslatest:gradle-jdks-latest:0.2.0'
        classpath 'com.google.errorprone:error_prone_core:2.14.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.161.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.11.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.15.0'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.7.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.26.0'
        classpath 'com.palantir.metricschema:gradle-metric-schema:0.19.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.7.0'
        classpath 'me.champeau.jmh:jmh-gradle-plugin:0.6.6'
    }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'java'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.jdks.latest'

javaVersions {
    libraryTarget = 11
    runtime = 17
}

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-class-uniqueness'
    apply plugin: 'com.palantir.baseline-exact-dependencies'
    apply plugin: 'com.palantir.java-format'

    configurations {
        testImplementationClasspath {
            exclude module: 'junit'
        }
    }

    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    plugins.withId('com.palantir.baseline-error-prone', {
        dependencies {
            errorprone 'com.uber.nullaway:nullaway'
        }

        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
            ]

            options.errorprone {
                option('NullAway:AnnotatedPackages', 'com.palantir')
                option('NullAway:CheckOptionalEmptiness', 'true')

                // warnings not explicitly provided by error-prone
                error 'NullAway',
                        'Slf4jLogsafeArgs',
                        'PreferCollectionTransform',
                        'PreferListsPartition',
                        'PreferSafeLoggingPreconditions',
                        'PreferSafeLoggableExceptions',
                        'PreferSafeLogger'

                // increase strictness for built-in error-prone checks
                error((com.google.errorprone.scanner.BuiltInCheckerSuppliers.ENABLED_WARNINGS +
                        com.google.errorprone.scanner.BuiltInCheckerSuppliers.DISABLED_CHECKS
                        ).collect { it.canonicalName() } as String[])

                disable 'AndroidJdkLibsChecker', // ignore Android
                        'Java7ApiChecker', // tritium requires JDK 11+
                        'Java8ApiChecker', // tritium requires JDK 11+
                        'MemberName', // false positives on ignored lambda args
                        'StaticOrDefaultInterfaceMethod', // Android specific
                        'Var', // high noise, low signal
                        'Varifier' // don't `var`ify everything yet as this conflicts with baseline VarUsage
            }
        }
    })

    tasks.withType(Test) {
        useJUnitPlatform {
            includeEngines 'jqwik', 'junit-jupiter'
        }
        maxParallelForks Runtime.getRuntime().availableProcessors()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    tasks.withType(Javadoc) {
        // suppress Javadoc doclint warnings in Java 8+
        if (!System.getProperty("java.version").startsWith("1.7")) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    tasks.check.dependsOn(javadoc)

    checkImplicitDependencies {
        // avoid spurious flags on dropwizard metrics
        ignore 'io.dropwizard.metrics', 'metrics-core'
    }
    checkUnusedDependencies {
        // avoid spurious flags on junit-jupiter
        ignore 'org.junit.jupiter', 'junit-jupiter'
    }
    tasks.check.dependsOn(checkImplicitDependencies)
    tasks.check.dependsOn(checkUnusedDependencies)

}

