options:
  javaPackage: com.palantir.tritium.metrics.jvm
  javaVisibility: packagePrivate
namespaces:
  os:
    docs: Operating System Metrics
    metrics:
      load.1:
        type: gauge
        docs: Gauge of the system load average. The system load average is the sum of the number of runnable entities queued to the available processors and the number of runnable entities running on the available processors averaged over a period of time.
      load.norm.1:
        type: gauge
        docs: Gauge based on `os.load.1` normalized for the number of available processors. This is designed to provide a hint about the system load, values are positive and may be greater than one.
  process:
    docs: JVM Process Metrics
    metrics:
      cpu.utilization:
        type: gauge
        docs: Gauge of the CPU load from the Witchcraft JVM process. Values range from zero to one.
  jvm:
    docs: JVM Metrics
    # The default 'JvmMetrics' name collides with the public JvmMetrics utility.
    shortName: InternalJvm
    metrics:
      safepoint.time:
        type: gauge
        docs: The accumulated elapsed time waiting at safepoints in ms (equivalent to `+PrintGCApplicationStoppedTime`). It helps debugging stop-the-world GCing, or biased locking going badly. See https://stackoverflow.com/questions/29666057/analyzing-gc-logs/29673564#29673564 for details.
      filedescriptor:
        type: gauge
        docs: Ratio of open file descriptors to the maximum allowed open file descriptors. When this value reaches 1, attempts to open files (including sockets) will fail.
      attribute.uptime:
        type: gauge
        docs: |
          Provides the Java virtual machine uptime value in milliseconds.
        tags:
        - name: javaSpecificationVersion
          docs: "Example: 11"
        - name: javaVersion
          docs: "Example: 11.0.3"
        - name: javaVersionDate
          docs: "Example: 2019-04-16"
        - name: javaRuntimeVersion
          docs: "Example: 11.0.3+7-LTS"
        - name: javaVendorVersion
          docs: "Example: Zulu11.31+11-CA"
        - name: javaVmVendor
          docs: "Example: Azul Systems, Inc."
        - name: enablePreview
          docs: "Whether the JVM is running with --enable-preview (see JEP 12)"
          values: [true, false]
      classloader.loaded:
        type: gauge
        docs: Total number of classes that have been loaded since the jvm started.
      classloader.unloaded:
        type: gauge
        docs: Total number of classes that have been unloaded since the jvm started.
      classloader.loaded.current:
        type: gauge
        docs: Number of classes that are currently loaded.
      threads.count:
        type: gauge
        docs: Total number of live threads.
      threads.daemon.count:
        type: gauge
        docs: Total number of live daemon threads.
      threads.deadlock.count:
        type: gauge
        docs: Number of threads that are currently deadlocked.
      threads.new.count:
        type: gauge
        docs: Number of live threads in the `NEW` state.
      threads.runnable.count:
        type: gauge
        docs: Number of live threads in the `RUNNABLE` state.
      threads.blocked.count:
        type: gauge
        docs: Number of live threads in the `BLOCKED` state.
      threads.waiting.count:
        type: gauge
        docs: Number of live threads in the `WAITING` state.
      threads.timed-waiting.count:
        type: gauge
        docs: Number of live threads in the `TIMED_WAITING` state.
      threads.terminated.count:
        type: gauge
        docs: Number of live threads in the `TERMINATED` state.
  jvm.memory:
    docs: Java virtual machine memory usage metrics.
    metrics:
      total.init:
        type: gauge
        docs: Initial amount of memory requested by the JVM.
      total.used:
        type: gauge
        docs: Total non-native memory used by the JVM.
      total.max:
        type: gauge
        docs: Maximum amount of memory that may be used by the JVM before allocations fail.
      total.committed:
        type: gauge
        docs: Amount of committed memory in bytes for the JVM to use.
      heap.init:
        type: gauge
        docs: Initial amount of heap memory requested by the JVM.
      heap.used:
        type: gauge
        docs: Heap memory used by the JVM.
      heap.max:
        type: gauge
        docs: Maximum amount of heap that may be used by the JVM before allocations fail.
      heap.committed:
        type: gauge
        docs: Amount of committed memory in bytes for the JVM heap.
      heap.usage:
        type: gauge
        docs: Ratio of `jvm.memory.heap.used` to `jvm.memory.heap.max`.
      non-heap.init:
        type: gauge
        docs: Initial amount of non-heap memory requested by the JVM.
      non-heap.used:
        type: gauge
        docs: Non-heap memory used by the JVM.
      non-heap.max:
        type: gauge
        docs: Maximum amount of non-heap that may be used by the JVM before direct allocations fail.
      non-heap.committed:
        type: gauge
        docs: Amount of committed memory in bytes for the JVM non-heap (e.g. direct memory).
      non-heap.usage:
        type: gauge
        docs: Ratio of `jvm.memory.non-heap.used` to `jvm.memory.non-heap.max`.